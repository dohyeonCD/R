data <- read.table('student.txt', header = TRUE, sep = ',', encoding ='UTF-8')
data <- read.table('student.txt', header = TRUE, sep = ',')
class(data)
dim(data)                   # 데이터 크기 확인인
print(data)
data <- read.table('student.txt', header = TRUE, sep = ';')
class(data)
dim(data)                   # 데이터 크기 확인인
print(data)
# 결측치 있을 때
data2 <- read.table('student2.txt', sep=';', na.strings = '-')
print(data)
print(data2)
# 결측치 있을 때
data2 <- read.table('student2.txt', sep=';', na.strings = 'NA')
print(data2)
# 결측치 있을 때
data2 <- read.table('student2.txt', sep=';', na.string = 'NA')
print(data2)
# 결측치 있을 때
data2 <- read.table('student2.txt', sep=';', na.string = '-')
print(data2)
# 결측치 있을 때
data2 <- read.table('student2.txt', sep=' ', na.string = '-')
print(data2)
# 결측치 있을 때
data2 <- read.table('student2.txt', header = TRUE, sep=' ', na.string = '-')
print(data2)
# 결측치 있을 때
data2 <- read.table('student2.txt', header = TRUE, sep=' ', na.string = 'NA')
print(data2)
# 결측치 있을 때
data2 <- read.table('student2.txt', header = TRUE, sep=' ', na.string = '-')
print(data2)
## read.csv                                                                                       read.csv(파일명, header= TRUE, col.names= c(), na.string= '')        # sep는 ,가 고정이라서~
data3 <- read.csv('student3.csv', header = F, col.names = c('학번', '이름', '학년', '성적'))
print(data3)
install.packages('readxl')
library(readxl)
data4 <- read.excel('student4.xlsx', col_names= TRUE, na= ' ')
data4 <- read_excel('student4.xlsx', col_names= TRUE, na= ' ')
print(data4)
data4 <- read_excel('student4.xlsx', col_names= TRUE)
print(data4)
# exam시트 가져오기
data5 <- read_excel('student4.xlsx', sheet= 'Exam', col_names = TRUE)
print(data5)
# exam시트 가져오기
data5 <- read_excel('student4.xlsx', sheet= 'Exam', col_names = TRUE, na='NULL')
print(data5)
# grade시트 가져오기
g_data <- read_excel('student4.xlsx')     # 비어있는 값이어서 결측치인 거 앎.
print(g_data)
# exam시트 가져오기
e_data <- read_excel('student4.xlsx', sheet= 'Exam', na='NULL')
print(e_data)
# homework시트 가져오기
# 특정 행 다 가져오기(cell_rows 함수)
h_data <- read_excel('student4.xlsx', sheet = Homework, range= cell_rows(3:8))
print(h_data)
# homework시트 가져오기
# 특정 행 다 가져오기(cell_rows 함수)
h_data <- read_excel('student4.xlsx', sheet = 'Homework', range= cell_rows(3:8))
print(h_data)
# 특정 행,열 범위만 가져오기 (row-column 지정 방식)
hh_data <- read_excel('student4.xlsx', sheet= 'Homework', range= 'R3C1:R8C4') #3행 1열~ 8행 4열
print(hh_data)
## write_xlsx(데이터 프레임 변수, path= 저장할 파일 명)
install.packages('writexl')
library(writexl)
data <- read_table('student.txt', header = TRUE, sep = ';')            # ; 써야 컬럼이 구분됨.
class(data)
dim(data)                   # 데이터 크기 확인
print(data)
data <- read.table('student.txt', header = TRUE, sep = ';')            # ; 써야 컬럼이 구분됨.
class(data)
dim(data)                   # 데이터 크기 확인
print(data)
##### 데이터 확인
## 데이터셋 선정 (datasets 패키지 내장 데이터셋)
library(datasets)
data <- Orange
print(data)
## str(data) : class, 크기, 미리보기 값 제공. factor는 범주형 데이터임을 의미하는 문자열 벡터
str(data)
## names(data) : 데이터의 컬럼 이름 출력
names(data)
## view(data) : Rstudio 뷰어 창에서 데이터 확인 가능
view(data)
## View(data) : Rstudio 뷰어 창에서 데이터 확인 가능
View(data)
##### 데이터 조작
## 데이터 특정 행, 열 추출
data.frame[c(1,2),]
##### 데이터 조작
## 데이터 특정 행, 열 추출
data[c(1,2), ]              # 데이터의 1,2행 과 모든 열 추출
data[, c(1,2)]              # 데이터의 모든 행과 1,2열 추출
data[c(1,2), c(1,2)]        # 데이터의 1행 1열~ 2행 2열 추출
##### 데이터 조작
## 데이터 특정 행, 열 추출
data[c(1,2), ]              # 데이터의 1,2행 과 모든 열 추출
## 데이터 특정 행, 열 제거 (-)
data[c(-1,-2), ]            # 데이터의 1,2행 제거
data[, c(-1,-2)]            # 데이터의 1,2열 제거
data[c(-1,-2), c(-1,-2)]    # 데이터의 1행 1열~ 2행 2열 제거
## View(data) : Rstudio 뷰어 창에서 데이터 확인 가능. V 대문자!
View(data)
## data$age --> $ 표시를 하면 data 데이터에서 age 컬럼의 벡터만 추출.
## mean(평균), var(분산), sd(표준편차)
names(data)
age_vec <- data$age
mean(age_vec)
var(age_vec)
sd(age_vec)
## table : 벡터 내에서 데이터 값이 각각 몇 회 등장하였는지 체크
tree_vec <- data$Tree
table(tree_vec)
## median, range(최대,최소)
median(age_vec)
range(age_vec)
## quantile(사분위 수)
quantile(age_vec)
##### 실습
data <- read.csv('TravelMode', header = TRUE)
##### 실습
data <- read.csv('TravelMode.csv', header = TRUE)
head(data)
dim(data)
## 실제 여행에 사용한 데이터로만 구성된 데이터셋 생성
data$choice
## 실제 여행에 사용한 데이터로만 구성된 데이터셋 생성
names(data)
names(data)
index <- choice == 'yes'
index <- data$choice == 'yes'
real <- choice[index]
index <- data$choice == 'yes'
real <- data$choice[index]
data.frame("X", "individual", "mode", "real", "wait", "vcost", "travel", "gcost", "income", "size")
data
choice <- data$choice
index <- which(choice == 'yes')
real_data <- data[index, ]
data
real_data
head(real_data)
best_data <- real_data[, c(-1,-2,-4)]
head(best_data)
str(best_data)
## mode, size는 범주형 데이터의 성격. table로 분석하기
table(best_data$mode)
table(best_data$size)
## 여행시, 교통수단으로 버스를 사용한 비율 구하기
30/210
## 여행시, 교통수단으로 버스를 사용한 비율 구하기
210/30
## 여행시, 교통수단으로 버스를 사용한 비율 구하기
30/210*100
## 여행시, 교통수단으로 버스를 사용한 비율 구하기
mode_data <- table(best_data$mode)
mode_name <- names(best_data)
mode_name <- names(best_data$mode)
## 여행시, 교통수단으로 버스를 사용한 비율 구하기
mode_data <- table(best_data$mode)
mode_data
mode_name
mode_name <- names(mode_data)
mode_name
mode_numeric <- as.numeric(mode_data)
mode_numeric
mode_data <- table(best_data$mode)
mode_name <- names(mode_data)               # 교통수단 벡터화
mode_numeric <- as.numeric(mode_data)       # mode_data 의 숫자형 데이터들을 numeric으로 변환
bus_trable <- mode_numeric[which(mode_name == 'bus')]   # 연결되어있던 데이터니 인덱스 동일~^^
bus_rate <- bus_trable/ sum(mode_numeric) *100
print(bus_rate)
print('hello')
cwd()
dir ()                                # student.txt. 파일 잘 들어가있는지 확인.
data <- read.table('student.txt', header = TRUE, sep = ';')            # ; 써야 컬럼이 구분됨.
class(data)
dim(data)                   # 데이터 크기 확인
print(data)
## 2021년 9월 국내 항공사의 '김해-제주' 비행기 실적의 항공사별 화물 실적 비율을 파이차트로.
# 엑셀 로딩 패키지 다운로드
installed.packages('readxl')
library(readxl)
#데이터 로딩
data <- read_excel('airport.xlsx', col_names = FALSE, range= 'R80C3:R85C12')
head(data)
# 데이터에서 필요한 값 추출
airportname <- data$...1                # 컬럼명이 ...1인 데이터 추출하여 벡터에 담기.
freight <- as.numeric(data$...10)       # <chr> character 형으로 왔기 때문에 형변환.
freight
# 항공사명 실적 비율 계산, 라벨 벡터 만들기
freight_percent <- round(freight/sum(freight) *100, digits = 1)                # 소수점 1째~
freight_percent
label_data <- paste(airportname, '(', freight_percent, '%)', sep= '')
label_data
# 파이차트 출력
pie(freight, labels = label_data)
## 서울시 코로나19 백신 예방접종 현황에서 당일 1차 접종자와 2차 접종자 데이터, 접종률 데이터~
data2 <- read.csv('covid19.csv', header = F, skip= 1, nrows = 30)    # 첫 행 스킵~ 30줄줄 로딩
## TravelMode.csv 에서 wait, vcost, gcost, income 컬럼에 대한 다중 박스그래프. travel 히스토~
data3 <- read.csv('TravelMode.csv')
head(data3)
dim(data3)
real_index <- which(choice == 'yes')
real_index
real_data <- data3[real_index]
real_data <- data3[real_index, ]
head(real_data)
# 데이터에서 필요한 값 추출
best_data <- real_data3[-1,-2,-4]
# 데이터에서 필요한 값 추출
best_data <- real_data[-1,-2,-4]
str(best_data)
head(best_data)
# 데이터에서 필요한 값 추출
best_data <- real_data[, c(-1,-2,-4)]
head(best_data)
# 박스그래프 출력
boxplot_data <- best_data[, c(-1, -4, -7)]          # 그래프 그릴 컬럼만 남겨두고 삭제
box(boxplot_data)
boxplot(boxplot_data)
# 히스토그램 출력
hist(best_data$travel)
##### Dplyr
## 데이터 전처리를 쉽게 해주는 R 패키지. 파이프 연산자 제공
install.packages('dplyr')
library(dplyr)
## 파이프 연산자 제공
a <- c(10,22)
a %>% mean
## rename 함수 (컬럼명 변경)                                                                       rename(data, 변경 후 컬럼명1 = 기존 컬럼명1, 변경 후 컬럼명2 = 기존 컬럼명2...)
data <- Orange
data
head(data)
data <- rename(data, Treeidx= Tree)
head(data)
## arrange 함수 (컬럼 정렬)                                                                       arrange(data, 컬럼명) _ 오름차순이 기본.     내림차순 하려면-> arrange(data, desc(컬럼명))
arrange(data, circumference)
## arrange 함수 (컬럼 정렬)                                                                       arrange(data, 컬럼명) _ 오름차순이 기본.     내림차순 하려면-> arrange(data, desc(컬럼명))
arrange(data, circumference) %>% head()
arrange(data, circumference, age) %>% head()
arrange(data, age, circumference) %>% head()
## arrange 함수 (컬럼 정렬)                                                                       arrange(data, 컬럼명) _ 오름차순이 기본.     내림차순 하려면-> arrange(data, desc(컬럼명))
arrange(data, circumference) %>% tail()
arrange(data, age, circumference) %>% tail()
arrange(data, age, circumference) %>% head()
arrange(data, age, circumference)
## rename 함수 (컬럼명 변경)                                                                       rename(data, 변경 후 컬럼명1 = 기존 컬럼명1, 변경 후 컬럼명2 = 기존 컬럼명2...)
data <- Orange
data <- rename(data, Treeidx= Tree)
head(data)
arrange(data, age, circumference)
## arrange 함수 (컬럼 정렬)                                                                       arrange(data, 컬럼명) _ 오름차순이 기본.     내림차순 하려면-> arrange(data, desc(컬럼명))
arrange(data, circumference) %>% tail()
arrange(data, age, circumference) %>% tail()
## distinct 함수 (중복값 제거)
distinct(data,age)
## 예제 데이터 생성
id <- as.character(c(2021001:2021010))
## 예제 데이터 생성
id <- as.character(c(2021001:2021010))
math <- c(100,54,36,76,54,94,15,6,34,64)
english <- c(95,23,11,89,50,53,70,13,60,90)
science <- c(99,56,43,90,34,77,43,3,85,72)
exam <- data.frame(id, math, english, science, exam)
exam
print(exam)
exam <- data.frame(id, math, english, science, exam)
exam <- data.frame(id, math, english, science)
exam
## select : 원하는 컬럼만 추출                                                                    select(데이터, 컬럼명1, 컬럼명2)
select(exam, science, english)
## filter : 조건에 충족되는 행만 추출                                                             filter(데이터, 조건식). 조건식에서 &, | 연산자 이용 가능.
filter(exam, science>= 70 & math <= 50)
## mutate : 새로운 컬럼 생성                                                                      mutate(데이터, 생성할 컬럼명1= 수식, ...)
mutate(exam, average= (math+science+english)/3 )
mutate(exam, pass= ifelse(average>=70, print('합격'), print('불합격')))
mutate(exam, pass= ifelse((math+science+english)/3)>=70, print('합격'), print('불합격'))
mutate(exam, pass= ifelse((math+science+english)/3)>=70, '합격', '불합격')
mutate(exam, pass= ifelse((math+science+english)/3>=70, '합격', '불합격'))
## 예제 데이터 생성 2
id <- as.character(rep(c(2021001:2021010), times= 2))
mid_math <- c(100,54,36,76,54,94,15,6,34,64)
final_math <- c(90,80,23,67,44,71,10,45,87,55)
math <- c(mid_math, final_math)
mid_english <- c(95,23,11,89,50,53,70,13,60,90)
final_english <- c(90,32,4,74,90,23,83,52,43,70)
english <- c(mid_english, final_english)
mid_science <- c(99,56,43,90,34,77,43,3,85,72)
final_science <- c(100,79,25,65,63,75,73,66,50,83)
science <- c(mid_science, final_science)
examT <- rep(c('중간','기말'), times= c(10,10))             # 10번, 10번씩 따로 반복.
exam2 <- data.frame(id, math, english, science, examT)
exam2
## group_by : 특정 컬럼의 값이 같은 데이터들을 집단으로 묶어줌.                                   group_by(데이터, 컬럼명)
groip_by(exam2, id)
## group_by : 특정 컬럼의 값이 같은 데이터들을 집단으로 묶어줌.                                   group_by(데이터, 컬럼명)
group_by(exam2, id)
## summarize : 그룹 단위 동일기능 수행 후, 새로운 데이터 프레임에 수행 결과 통합                  summarize(그룹된 데이터, 컬럼명1= 계산식1, ...)
group_exam <- group_by(exam2, id)
summarize(group_exam, math_avg= mean(math), english_avg= mean(english))
# exam2에서 'examT' 단위로 그룹을 묶고, 중간/기말 고사의 평균 수학점수를 구하시오.
group_exam <- group_by(exam2, examT)
summarize(group_exam, math_avg= mean(math))
id <- as.character(c(2021001:2021010))
math <- c(100,54,36,76,54,94,15,6,34,64)
english <- c(95,23,11,89,50,53,70,13,60,90)
science <- c(99,56,43,90,34,77,43,3,85,72)
exam <- data.frame(id, math, english, science)
exam
## 예제 데이터 생성 2
id <- as.character(rep(c(2021001:2021010), times= 2))
mid_math <- c(100,54,36,76,54,94,15,6,34,64)
final_math <- c(90,80,23,67,44,71,10,45,87,55)
math <- c(mid_math, final_math)
mid_english <- c(95,23,11,89,50,53,70,13,60,90)
final_english <- c(90,32,4,74,90,23,83,52,43,70)
english <- c(mid_english, final_english)
mid_science <- c(99,56,43,90,34,77,43,3,85,72)
final_science <- c(100,79,25,65,63,75,73,66,50,83)
science <- c(mid_science, final_science)
examT <- rep(c('중간','기말'), times= c(10,10))             # 10번, 10번씩 따로 반복.
exam2 <- data.frame(id, math, english, science, examT)
exam2
## select : 원하는 컬럼만 추출                                                                    select(데이터, 컬럼명1, 컬럼명2)
select(exam, science, english)              # 기본 R 함수: exam[, c('science','english')]...ㅎ
install.packages('dplyr')
library(dplyr)
## 파이프 연산자 제공 (%>%)
a <- c(10,22)
a %>% mean              # 왼쪽 변수를 오른쪽 함수에 사용. mean(a)와 동일. 체인 연산자.
## select : 원하는 컬럼만 추출                                                                    select(데이터, 컬럼명1, 컬럼명2)
select(exam, science, english)              # 기본 R 함수: exam[, c('science','english')]...ㅎ
## group_by : 특정 컬럼의 값이 같은 데이터들을 집단으로 묶어줌.                                   group_by(데이터, 컬럼명)
group_by(exam2, id)          # group_by 만으로는 외관상 달라지는 것 X. group관련 형식이 추가됨~
# exam2에서 'examT' 단위로 그룹을 묶고, 중간/기말 고사의 평균 수학점수를 구하시오.
group_exam <- group_by(exam2, examT)
summarize(group_exam, math_avg= mean(math))
plot(x,y)
## plot()                                                                                        plot(x,y, type='', main=NULL, xlab='', ylab='', xlim=c(), ylim=c()...)                        type : 그래프 타입. (p: 점, l: 선, b(o): 점&선)            main : 그래프 제목                 lab : 축 이름            lim : 축의 값 범위
x= 1
y= 2
plot(x,y)
plot(x,y,ylim = c(0.6,2.0))
x= c(1,2,3,4,5,6)
y= c(2,4,5.8,7,7.5,8)
plot(x,y, pch= 19)              # 점의 모양. 숫자(1~25)마다 지정되어있음, 문자('*','%','#' 등)
plot(x,y, type= 'l')
plot(x,y, type= 'b')
plot(x,y, pch= 19)              # 점의 모양. 숫자(1~25)마다 지정되어있음, 문자('*','%','#' 등)
plot(x,y, type= 'b')
library(datasets)
data <- EuStockMarkets            # 4개의 컬럼이 있음. 그걸 다 합쳐서 x축으로~!
plot(1:length(data), data, type='l', main='1991-1998 Europe~', xlab = 'day', ylab = 'price')
## 다중 그래프 그리기
## plot을 먼저 그리고, lines를 통해 추가 그래프를 그림.
plot(x, type= 'o', xlim= c(1,6), ylim= c(1,8), pch= 15, col= 'skyblue')     # col은 선 색 지정~
## 다중 그래프 그리기
## plot을 먼저 그리고, lines를 통해 추가 그래프를 그림.
plot(kk, type= 'o', xlim= c(1,6), ylim= c(1,8), pch= 15, col= 'skyblue')     # col은 선 색 지정~
## 다중 그래프 그리기
## plot을 먼저 그리고, lines를 통해 추가 그래프를 그림.
plot(x, type= 'o', xlim= c(1,6), ylim= c(1,8), pch= 15, col= 'skyblue')     # col은 선 색 지정~
lines(y, type= 'b', pch= 19, col= 'black')
library(datasets)
data <- as.numeric(AirPassengers)
y1949= data[1:12]
y1950= data[13:24]
plot(y1949, type= 'o', xlab= 'Month', ylab= 'passengers', ylim= c(90,180), pch= 19, col= 'red')
lines(y1950, type= 'o', pch= 19, col= 'blue')
## 범례 그리기
## legend(위치 값, legend= 라벨 값, fill= 색상 값)
## 범례 그리기
## legend(위치 값, legend= 라벨 값, fill= 색상 값)
plot(y1949, type= 'o', xlab= 'Month', ylab= 'passengers', ylim= c(90,180), pch= 19, col= 'red')
lines(y1950, type= 'o', pch= 19, col= 'blue')
legend('topright', legend = c('y1949', 'y1950'), fill = c('red', 'blue'))
## 파이 차트                                                                                     pie(데이터, label= 라벨, init.angle= 0, radius= 1)                                            label : 요소별 이름 등록           init.angle : 기준선 각도         radius : 원의 크기 조절
data= c(40,23,34)
ABC <- c('A','B','C')
pie(data, label= ABC)
## 히스토그램                                                                                     hist(데이터, breaks= NULL, freq= T).        수치형 데이터를 범주화하여 표현하는 데 적합       break : 범주 개수                           freq : 결과 출력 값 기준. (T는 횟수, F는 비율)
data <- c(2,1,4,5.8,6,7,12,13,14,4,2,6,7,6,5,4,7,7.5,8,6,4,7,6,5,9,1,3,2,15,20,17)
re_table <- table(reserch)
# 범주형 데이터를 파이차트로 시각화
reserch <- c('좋다', '싫다', '보통이다', '좋다', '좋다', '보통이다', '싫다', '좋다', '싫다')
re_table <- table(reserch)
re_table
pie(re_table)                       # table 객체 삽입시, label이 자동으로 붙음.
## 히스토그램                                                                                     hist(데이터, breaks= NULL, freq= T).        수치형 데이터를 범주화하여 표현하는 데 적합       break : 범주 개수                           freq : 결과 출력 값 기준. (T는 횟수, F는 비율)
data <- c(2,1,4,5.8,6,7,12,13,14,4,2,6,7,6,5,4,7,7.5,8,6,4,7,6,5,9,1,3,2,15,20,17)
hist(data)
hist(data, breaks = 10)                        # 10개의 범주로 쪼갬.
hist(data, breaks = 10, freq = F)              # y축이 비율로 표현됨.
hist(data, breaks = 10)                        # 10개의 범주로 쪼갬.
hist(data, breaks = 10, freq = F)              # y축이 비율로 표현됨.
## 상자그림                                                                                       boxplot(데이터, boxwex= NULL)              수치형 데이터의 분포를 시각화 하는 데 적합         boxwex : 상자의 넓이
boxplot(data)
boxplot(data, boxwex= 0.5)
# 다중 상자그림
data <- airquality
# 다중 상자그림
data <- airquality
boxplot(data)
## 2021년 9월 국내 항공사의 '김해-제주' 비행기 실적의 항공사별 화물 실적 비율을 파이차트로.
# 엑셀 로딩 패키지 다운로드
installed.packages('readxl')
library(readxl)
#데이터 로딩
data <- read_excel('airport.xlsx', col_names = FALSE, range= 'R80C3:R85C12')
head(data)
# 데이터에서 필요한 값 추출
airportname <- data$...1                # 컬럼명이 ...1인 데이터 추출하여 벡터에 담기.
freight <- as.numeric(data$...10)       # <chr> character 형으로 왔기 때문에 형변환.
freight
# 항공사명 실적 비율 계산, 라벨 벡터 만들기
freight_percent <- round(freight/sum(freight) *100, digits = 1)                # 소수점 1째~
freight_percent
label_data <- paste(airportname, '(', freight_percent, '%)', sep= '')
label_data
#데이터 로딩
data <- read_excel('airport.xlsx', col_names = FALSE, range= 'R80C3:R85C12')
head(data)
# 데이터에서 필요한 값 추출
airportname <- data$...1                # 컬럼명이 ...1인 데이터 추출하여 벡터에 담기.
freight <- as.numeric(data$...10)       # <chr> character 형으로 왔기 때문에 형변환.
freight
# 파이차트 출력
pie(freight, labels = label_data)
data2 <- read.csv('covid19.csv', header = F, skip= 1, nrows = 30)    # 첫 행 스킵~ 30줄줄 로딩
dim(data2)
data2 <- data2[30:1,]                  # 데이터 위아래 뒤집기(9월 1일부터 나오게끔)
head(data2)
# 데이터에서 필요한 값 추출
first_vaccine <- data2$V3
second_vaccine <- data2$V6
first_rate <- data2$V5
second_rate <- data2$V8
# 다중 그래프 출력
plot(first_vaccine, type = 'o', xlab = 'day', ylab = 'count', main = 'covid 일일 백신 접종수',
pch= 19)
lines(second_vaccine, type = 'o', col= 'red', pch= 19)
legend('topright', legend = c('first_vaccine', 'second_vaccine'), fill= c('black', 'red'))
plot(first_rate, type = 'o', xlab = 'day', ylab = 'rate(%)', ylim= c(20,80), col= 'skyblue',
main = 'covid 총 백신 접종률', pch= 19)
lines(second_rate, type = 'o', col= 'purple', pch= 19)
legend('bottomright', legend = c('first_rate', 'second_rate'), fill= c('skyblue', 'purple'))
## TravelMode.csv 에서 wait, vcost, gcost, income 컬럼에 대한 다중 박스그래프. travel 히스토~
data3 <- read.csv('TravelMode.csv')
head(data3)
dim(data3)
# 데이터에서 필요한 값 추출
choice <- data3$choice
real_index <- which(choice == 'yes')
real_data <- data3[real_index, ]
head(real_data)
best_data <- real_data[, c(-1,-2,-4)]               # x, individual, choice 컬럼 삭제
head(best_data)
# 박스그래프 출력
boxplot_data <- best_data[, c(-1, -4, -7)]          # 그래프 그릴 컬럼만 남겨두고 삭제
boxplot(boxplot_data)
# 히스토그램 출력
hist(best_data$travel)
## str(data) : class, 크기, 미리보기 값 제공. factor는 범주형 데이터임을 의미하는 문자열 벡터
str(data)
## names(data) : 데이터의 컬럼 이름 출력
names(data)
## View(data) : Rstudio 뷰어 창에서 데이터 확인 가능. V 대문자!
View(data)
## select : 원하는 컬럼만 추출                                                                    select(데이터, 컬럼명1, 컬럼명2)
select(exam, science, english)              # 기본 R 함수: exam[, c('science','english')]...ㅎ
## filter : 조건에 충족되는 행만 추출                                                             filter(데이터, 조건식). 조건식에서 &, | 연산자 이용 가능.
filter(exam, science>= 70 & math <= 50)     # 기본 R 함수: 조건에 맞는 인덱스 추출-> 대입~..ㅎ
## mutate : 새로운 컬럼 생성                                                                      mutate(데이터, 생성할 컬럼명1= 수식, ...)
mutate(exam, average= (math+science+english)/3 )
#평균이 70점 이상이면 '합격', 아니면 '불합격' 값을 가지는 pass 컬럼을 추가하시오.
mutate(exam, pass= ifelse((math+science+english)/3>=70, '합격', '불합격'))
## summarize : 그룹 단위로 동일기능 수행 후, 새로운 데이터 프레임에 수행 결과 통합                summarize(그룹된 데이터, 컬럼명1= 계산식1, ...)
group_exam <- group_by(exam2, id)
summarize(group_exam, math_avg= mean(math), english_avg= mean(english))
# exam2에서 'examT' 단위로 그룹을 묶고, 중간/기말 고사의 평균 수학점수를 구하시오.
group_exam <- group_by(exam2, examT)
summarize(group_exam, math_avg= mean(math))
View exam2
View(exam2)
install.packages("gapminder")
library(gapminder)
library(dplyr)
str(gapminder)
install.packages("gapminder")
library(gapminder)
library(dplyr)
install.packages("gapminder")
library(gapminder)
install.packages("gapminder")
library(gapminder)
library(dplyr)
str(gapminder)
?gapminder
table(gapminder$continent)
table(gapminder$country)
View(gapminder)
View(gapminder)
?gapminder
table(gapminder$continent)
View(gapminder)
gapminder %>% group_by(continent)
